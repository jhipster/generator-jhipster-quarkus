<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
    /**
     * {@code GET  /<%= entityApiUrl %>} : get all the <%= entityInstancePlural %>.
     *<%_ if (hasPagination) { %>
     * @param pageRequest the pagination information.
    <%_ } _%>
     * @param criteria the criteria which the requested entities should match.
     * @return the {@link Response} with status {@code 200 (OK)} and the list of <%= entityInstancePlural %> in body.
     */
    @GET
    <%_ if (databaseType === 'sql' && fieldsContainOwnerManyToMany && !viaService) { _%>
    @Transactional
    <%_ } _%>
    public Response<List<<%= entityOrDtoClass %>>> getAll<%= entityClassPlural %>(<%= entityClass %>Criteria criteria<% if (hasPagination) { %>, Pageable pageable<% if (reactive) { %>, ServerHttpRequest request<% } %><% } %>) {
        log.debug("REST request to get <%= entityClassPlural %> by criteria: {}", criteria);
    <%_ if (pagination === 'no') { _%>
        List<<%= entityOrDtoClass %>> entityList = <%= entityInstance %>QueryService.findByCriteria(criteria);
        return Response.ok().entity(entityList).build();
    <%_ } else { _%>
        Page<<%= entityOrDtoClass %>> page = <%= entityInstance %>QueryService.findByCriteria(criteria, pageable);
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(<% if (!reactive) { %>ServletUriComponentsBuilder.fromCurrentRequest()<% } else { %>UriComponentsBuilder.fromHttpRequest(request)<% } %>, page);
        return ResponseEntity.ok().headers(headers).entity(page.getContent());
    <%_ } _%>
    }

    /**
     * {@code GET  /<%= entityApiUrl %>/count} : count all the <%= entityInstancePlural %>.
     *
     * @param criteria the criteria which the requested entities should match.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the count in body.
    */
    @GET
    @Path("/count")
    public Response count<%= entityClassPlural %>(<%= entityClass %>Criteria criteria) {
        log.debug("REST request to count <%= entityClassPlural %> by criteria: {}", criteria);
        return Response.ok().entity(<%= entityInstance %>QueryService.countByCriteria(criteria)).build();
    }
