<%#
 Copyright 2020-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.util;

import <%= packageName %>.service.Paged;

import javax.ws.rs.core.Link;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;
import java.util.ArrayList;

public final class PaginationUtil {

    public static final String HEADER_X_TOTAL_COUNT = "X-Total-Count";
    public static final String HEADER_X_PAGE_COUNT = "X-Page-Count";
    public static final String HEADER_LINK = "Link";
    public static final String REL_FIRST = "first";
    public static final String REL_LAST = "last";
    public static final String REL_PREV = "prev";
    public static final String REL_NEXT = "next";

    private PaginationUtil() {
    }

    public static <T> Response.ResponseBuilder withPaginationInfo(Response.ResponseBuilder builder, UriInfo uriInfo, Paged<T> paged) {
        builder.header(HEADER_X_TOTAL_COUNT, paged.totalCount);
        builder.header(HEADER_X_PAGE_COUNT, paged.pageCount);

        var pageNumber = paged.index;
        var pageSize = paged.size;

        var links = new ArrayList<String>();

        links.add(prepareLink(uriInfo, 0, pageSize, REL_FIRST));
        links.add(prepareLink(uriInfo, paged.pageCount - 1, pageSize, REL_LAST));

        if (pageNumber > 0) {
            links.add(prepareLink(uriInfo, pageNumber - 1, pageSize, REL_PREV));
        }

        if (pageNumber < paged.pageCount - 1) {
            links.add(prepareLink(uriInfo, pageNumber + 1, pageSize, REL_NEXT));
        }

        builder.header(HEADER_LINK, String.join(",", links));

        return builder;
    }

    private static String prepareLink(UriInfo uriInfo, long pageNumber, long pageSize, String relType) {
        return Link.fromUri(
            uriInfo.getRequestUriBuilder()
                .replaceQueryParam("page", pageNumber)
                .replaceQueryParam("size", pageSize)
                .buildFromEncoded()
                .toString()
                .replace(",", "%2C")
                .replace(";", "%3B")
        ).rel(relType).build().toString();
    }
}
