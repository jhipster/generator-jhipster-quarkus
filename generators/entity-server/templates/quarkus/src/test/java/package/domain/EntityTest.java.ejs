<%#
 Copyright 2020-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.domain;

import static org.assertj.core.api.Assertions.assertThat;

import <%= packageName %>.TestUtil;
import org.junit.jupiter.api.Test;

import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.SequenceGenerator;
import javax.validation.constraints.NotNull;
import io.swagger.annotations.ApiModel;
import <%= packageName %>.AssertAnnotations;
import <%= packageName %>.ExtractAnnotation;
import io.quarkus.runtime.annotations.RegisterForReflection;

<%_
let hasOauthUser = false;
for (idx in relationships) {
    isUsingMapsId = relationships[idx].useJPADerivedIdentifier === true;
    if (isUsingMapsId) {
        hasOauthUser = relationships[idx].otherEntityName === 'user' && authenticationType === 'oauth2';
        break;
    }
}
_%>
<%_ if (databaseType === 'cassandra' || (databaseType === 'sql' && hasOauthUser === true)) { _%>
import java.util.UUID;
<%_ } _%>

public class <%= entityClass %>Test {
    
    @Test
    public void equalsVerifier() throws Exception {
        // Two instances of <%= entityClass %> should be equal to each other
        TestUtil.equalsVerifier(<%= asEntity(entityClass) %>.class);
    <%_if (!embedded) { _%>
        <%= asEntity(entityClass) %> <%= asEntity(entityInstance) %>1 = new <%= asEntity(entityClass) %>();
        <%= asEntity(entityInstance) %>1.id = <% if (databaseType === 'sql' && hasOauthUser === true) { %>UUID.randomUUID().toString()<% } else if (databaseType === 'sql') { %>1L<% } else if (databaseType === 'mongodb' || databaseType === 'neo4j' || databaseType === 'couchbase') { %>"id1"<% } else if (databaseType === 'cassandra') { %>UUID.randomUUID()<% } %>;
        <%= asEntity(entityClass) %> <%= asEntity(entityInstance) %>2 = new <%= asEntity(entityClass) %>();
        <%= asEntity(entityInstance) %>2.id = <%= asEntity(entityInstance) %>1.id;
        assertThat(<%= asEntity(entityInstance) %>1).isEqualTo(<%= asEntity(entityInstance) %>2);
        <%= asEntity(entityInstance) %>2.id = <% if (databaseType === 'sql' && hasOauthUser === true) { %>UUID.randomUUID().toString()<% } else if (databaseType === 'sql') { %>2L<% } else if (databaseType === 'mongodb' || databaseType === 'neo4j' || databaseType === 'couchbase') { %>"id2"<% } else if (databaseType === 'cassandra') { %>UUID.randomUUID()<% } %>;
        assertThat(<%= asEntity(entityInstance) %>1).isNotEqualTo(<%= asEntity(entityInstance) %>2);
        <%= asEntity(entityInstance) %>1.id = null;
        assertThat(<%= asEntity(entityInstance) %>1).isNotEqualTo(<%= asEntity(entityInstance) %>2);
    <%_} _%>
    }
    
    @Test
    public void entityAnnotations() throws Exception {
        // Entity <%= entityClass %> should be annotated with @Entity, @Table, @RegisterForReflection, @ApiModel
        AssertAnnotations.assertEntityAnnotations(<%= entityClass %>.class, 
            Entity.class, Table.class, RegisterForReflection.class, ApiModel.class);
    }    
    
    @Test
    public void idFieldAnnotations() throws Exception {
        // ID field should be annotated with @Id, @GeneratedValue, @SequenceGenerator
        AssertAnnotations.assertFieldAnnotations(<%= entityClass %>.class, "id", 
            Id.class, GeneratedValue.class, SequenceGenerator.class);
    }
    
    @Test
    public void requiredAnnotations() throws Exception {
        // Assert that required fields are annotated with @NotNull and that @Column(nullable = false) 
<%_ for (let idx = 0; idx < fields.length; idx++) { 
    const required = fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.includes('required') && fields[idx].fieldType !== 'byte[]';
    if (required) {
_%>
		AssertAnnotations.assertFieldAnnotations(<%= entityClass %>.class, "<%= fields[idx].fieldName %>", NotNull.class, Column.class);
		assertThat(ExtractAnnotation.getFieldAnnotation(<%= entityClass %>.class, "<%= fields[idx].fieldName %>", Column.class).nullable()).isFalse();
<%_ } }
_%>
    }
    
    @Test
    public void uniqueAnnotations() throws Exception {
        // Assert that unique fields are annotated with @Column(unique = true)
<%_ for (let idx = 0; idx < fields.length; idx++) { 
    const unique = fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.includes('unique') && fields[idx].fieldType !== 'byte[]';
    if (unique) {
_%>
		assertThat(ExtractAnnotation.getFieldAnnotation(<%= entityClass %>.class, "<%= fields[idx].fieldName %>", Column.class).unique()).isTrue();
<%_ } }
_%>
    }
}
