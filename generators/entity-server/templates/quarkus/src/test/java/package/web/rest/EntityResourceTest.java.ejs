<%#
 Copyright 2020-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.web.rest;

<%- include('../../_partials/imports', this); -%>

@QuarkusTest
public class <%= entityClass%>ResourceTest {
    private static final TypeRef<<%= entityOrDtoClass%>> ENTITY_TYPE = new TypeRef<>() { };

<%- include('../../_partials/defaults', this); -%>
<%_ if (cacheProvider === 'redis') { _%>
    static RedisServer server;
<%_ } _%>
    String adminToken;

    <%= entityOrDtoClass %> <%= entityOrDtoInstance %>;

<%_ if (databaseType === 'sql') { _%>
    @Inject
    LiquibaseFactory liquibaseFactory;
<%_ } _%>

    @BeforeAll
    static void jsonMapper() {
        RestAssured.config =
            RestAssured.config().objectMapperConfig(objectMapperConfig().defaultObjectMapper(TestUtil.jsonbObjectMapper()));
    }

    @BeforeEach
    public void authenticateAdmin() {
        this.adminToken = TestUtil.getAdminToken();
    }

<%_ if (databaseType === 'sql') { _%>
    @BeforeEach
    public void databaseFixture() {
        try (Liquibase liquibase = liquibaseFactory.createLiquibase()) {
            liquibase.dropAll();
            liquibase.validate();
            liquibase.update(liquibaseFactory.createContexts(), liquibaseFactory.createLabels());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
<%_ } _%>
    <%_ if (cacheProvider === 'redis') { _%>
    @BeforeAll
    public static void startRedisServer() throws IOException {
        server = new RedisServer(6379);
        server.start();
    }
    <%_ } _%>
    <%_ if (cacheProvider === 'redis') { _%>
    @AfterAll
    public static void stopRedisServer() {
        server.stop();
    }
    <%_ } _%>
    /**
     * Create an entity for this test.
     */
    public static <%= entityOrDtoClass %> createEntity() {
        var <%= entityOrDtoInstance %> = new <%= entityOrDtoClass %>();
        <%_ for (let idx = 0; idx < fields.length; idx++) { _%>
        <%= entityOrDtoInstance %>.<%= fields[idx].fieldName %> = DEFAULT_<%= fields[idx].fieldNameUnderscored.toUpperCase(); %>;
        <%_ } _%>
        return <%= entityOrDtoInstance %>;
    }

    @BeforeEach
    public void initTest() {
        <%= entityOrDtoInstance %> = createEntity();
    }

<%- include('../../_partials/get_all', this); -%>

<%- include('../../_partials/get', this); -%>
    <%_ if (!readOnly) { _%>
    
<%- include('../../_partials/create', this); -%>

<%- include('../../_partials/update', this); -%>

<%- include('../../_partials/delete', this); -%>

    <%_ } _%>
}
