<%#
 Copyright 2020-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
    @Test
    public void update<%= entityClass %>() {
        // Initialize the test by posting a new <%= entityClass %> 
        <%= entityOrDtoInstance %> = given()
            .auth()
            .preemptive()
            .oauth2(adminToken)
            .contentType(APPLICATION_JSON)
            .accept(APPLICATION_JSON)
            .body(<%= entityOrDtoInstance %>)
            .when()
            .post("/api/<%= entityApiUrl %>")
            .then()
            .statusCode(CREATED.getStatusCode())
            .extract().as(ENTITY_TYPE);

        // Retrieve the new <%= entityClass %> from the database so that it can be updated
        var tableSizeBeforeUpdate = <%= entityClass %>.count();
        <%= entityClass %> updated<%= entityOrDtoClass %> = <%= entityClass %>.findById(<%= entityOrDtoInstance %>.id);

        // Update the <%= entityClass %> retrieved from the database
        <%_ for (let idx = 0; idx < fields.length; idx++) { _%>
        updated<%= entityOrDtoClass %>.<%= fields[idx].fieldName %> = UPDATED_<%= fields[idx].fieldNameUnderscored.toUpperCase() %>;
        <%_ } _%>

        // PUT should correctly update a given <%= entityOrDtoInstance %> and return OK
        given()
            .auth()
            .preemptive()
            .oauth2(adminToken)
            .contentType(APPLICATION_JSON)
            .accept(APPLICATION_JSON)
            .body(updated<%= entityOrDtoClass %>)
            .when()
            .put("/api/<%= entityApiUrl %>")
            .then()
            .statusCode(OK.getStatusCode());

        // Retrieve the updated <%= entityClass %> from the database for validation
        <%= entityClass %> test<%= entityOrDtoClass %> = <%= entityClass %>.findById(<%= entityOrDtoInstance %>.id);
        assertThat(<%= entityClass %>.count()).isEqualTo(tableSizeBeforeUpdate);
<%- include('./object_verification', {...this, prefix: 'UPDATED_'}); -%>
    }

    @Test
    public void updateNonExisting<%= entityClass %>() {
        // PUT should return BAD_REQUEST and not update the database if <%= entityOrDtoInstance %> has a non-existing ID
        var tableSizeBeforeUpdate = <%= entityClass %>.count();
        given()
            .auth()
            .preemptive()
            .oauth2(adminToken)
            .contentType(APPLICATION_JSON)
            .accept(APPLICATION_JSON)
            .body(<%= entityOrDtoInstance %>)
            .when()
            .put("/api/<%= entityApiUrl %>")
            .then()
            .statusCode(BAD_REQUEST.getStatusCode());

        // Assert that the database was not updated
        assertThat(<%= entityClass %>.count()).isEqualTo(tableSizeBeforeUpdate);
    }
