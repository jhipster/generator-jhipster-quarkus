<%_ for (let idx = 0; idx < fields.length; idx++) {
    const required = fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.includes('required') && fields[idx].fieldType !== 'byte[]';
    if (required) {
_%>
    @Test
    public void check<%= fields[idx].fieldInJavaBeanMethod %>IsRequired() throws Exception {
        var databaseSizeBeforeTest = given()
            .auth()
            .preemptive()
            .oauth2(adminToken)
            .accept(APPLICATION_JSON)
            .when()
            .get("/api/<%= entityApiUrl %>")
            .then()
            .statusCode(OK.getStatusCode())
            .contentType(APPLICATION_JSON)
            .extract().as(LIST_OF_ENTITY_TYPE)
            .size();

        // set the field null
        <%= entityInstance %>.<%= fields[idx].fieldName %> = null;

        // Create the <%= entityClass %>, which fails.
        <%_ if (hasDto) { _%>
        DTO TODO
        <%_ } _%>
        given()
            .auth()
            .preemptive()
            .oauth2(adminToken)
            .contentType(APPLICATION_JSON)
            .accept(APPLICATION_JSON)
            .body(<%= entityInstance %>)
            .when()
            .post("/api/<%= entityApiUrl %>")
            .then()
            .statusCode(BAD_REQUEST.getStatusCode());

        // Validate the <%= entityClass %> in the database
        var <%= entityInstance %>List = given()
            .auth()
            .preemptive()
            .oauth2(adminToken)
            .accept(APPLICATION_JSON)
            .when()
            .get("/api/<%= entityApiUrl %>")
            .then()
            .statusCode(OK.getStatusCode())
            .contentType(APPLICATION_JSON)
            .extract().as(LIST_OF_ENTITY_TYPE);

        assertThat(<%= entityInstance %>List).hasSize(databaseSizeBeforeTest);
    }
<%_ }
} _%>
