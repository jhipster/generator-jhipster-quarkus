<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.repository;

import <%=packageName%>.domain.User;
import io.quarkus.hibernate.orm.panache.PanacheRepository;

import javax.enterprise.context.ApplicationScoped;
import java.time.Instant;
import java.util.List;
import java.util.Optional;

/**
 * Hibernate Panache JPA repository for the {@link User} entity.
 */
@SuppressWarnings("unused")
@ApplicationScoped
public class UserRepository implements PanacheRepository<User> {

    public Optional<User> findOneByActivationKey(String activationKey) {
        return find("activationKey", activationKey).firstResultOptional();
    }

    public List<User> findAllByActivatedIsFalseAndActivationKeyIsNotNullAndCreatedDateBefore(Instant dateTime) {
        return list("activated = false and activationKey not null and createdDate <= ?1", dateTime);
    }

    public Optional<User> findOneByResetKey(String resetKey) {
        return find("resetKey", resetKey).firstResultOptional();
    }

    public Optional<User> findOneByEmailIgnoreCase(String email) {
        return find("LOWER(email) = LOWER(?1)", email).firstResultOptional();
    }

    public Optional<User> findOneByLogin(String login) {
        return find("login", login).firstResultOptional();
    }

    public Optional<User> findOneWithAuthoritiesById(Long id) {
        return find("FROM User u LEFT JOIN FETCH u.authorities WHERE u.id = ?1", id).firstResultOptional();
    }

    public Optional<User> findOneWithAuthoritiesByLogin(String login) {
        return find("FROM User u LEFT JOIN FETCH u.authorities WHERE u.login = ?1", login)
//            .withHint(QueryHints.HINT_CACHEABLE, "true")
            .firstResultOptional();
    }

    public Optional<User> findOneWithAuthoritiesByEmailIgnoreCase(String email) {
        return find("FROM User u LEFT JOIN FETCH u.authorities WHERE LOWER(u.login) = LOWER(?1)", email)
//            .withHint(QueryHints.HINT_CACHEABLE, "true")
            .firstResultOptional();
    }

//    public Page findAllByLoginNot(Page page, String login) {
//        return find("login not ?1", login).page(page).firstPage();
//    }

}
