<%#
 Copyright 2020-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.domain;

import <%=packageName%>.config.Constants;
<%_ if (cacheProvider === 'caffeine') { _%>
import <%=packageName%>.config.Constants;
import io.quarkus.cache.CacheResult;
<%_ } _%>
<%_ if (databaseType === 'sql') { _%>
import io.quarkus.hibernate.orm.panache.PanacheEntityBase;
import io.quarkus.runtime.annotations.RegisterForReflection;
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
import io.quarkus.mongodb.panache.common.MongoEntity;
import io.quarkus.mongodb.panache.PanacheMongoEntityBase;
import org.bson.codecs.pojo.annotations.BsonId;
<%_ if (cacheProvider === 'caffeine') { _%>
import org.bson.codecs.pojo.annotations.BsonIgnore;
<%_ } _%>
<%_ } _%>
import java.io.Serializable;
import java.time.Instant;
import java.util.HashSet;
<%_ if (['sql', 'mongodb'].includes(databaseType)) { _%>
import io.quarkus.panache.common.Page;
import java.util.List;
import java.util.Optional;
<%_ } _%>
import java.util.Set;
<%_ if (databaseType === 'sql') { _%>
import javax.persistence.*;
import org.hibernate.annotations.BatchSize;
<%_ } _%>
import javax.json.bind.annotation.JsonbTransient;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
<%_ if (enableHibernateCache) { _%>
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Cache;
<%_ } _%>

/**
 * A user.
 */
<%_ if (databaseType === 'sql') { _%>
@Entity
@Table(name = "<%= jhiTablePrefix %>_user")
<%_ if (enableHibernateCache) { _%>
@Cacheable
<%_ } _%>
<%_ } else if (databaseType === 'mongodb') { _%>
@MongoEntity(collection="<%= jhiTablePrefix %>_user")
<%_ } _%>
public class User <% if (databaseType === 'sql') { %>extends PanacheEntityBase <% } else if (databaseType === 'mongodb') { %>extends PanacheMongoEntityBase <% }%>implements Serializable {
    private static final long serialVersionUID = 1L;

<%_ if (databaseType === 'sql') { _%>
    @Id
    <%_ if (prodDatabaseType === 'mysql' || prodDatabaseType === 'mariadb') { _%>
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    <%_ }  else { _%>
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "sequenceGenerator")
    @SequenceGenerator(name = "sequenceGenerator")
    <%_ } _%>
<%_ } _%>
<%_ if (databaseType === 'couchbase') { _%>
    @GeneratedValue(strategy = UNIQUE, delimiter = ID_DELIMITER)
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
    @BsonId
<%_ } _%>
    public <% if (databaseType === 'mongodb') { %>String<% } else { %>Long<% }%> id;

    @NotNull
    @Pattern(regexp = Constants.LOGIN_REGEX)
    @Size(min = 1, max = 50)
<%_ if (databaseType === 'sql') { _%>
    @Column(length = 50, unique = true, nullable = false)
<%_ } _%>
    public String login;

<%_ if (authenticationType !== 'oauth2') { _%>
    @NotNull
    @Size(min = 60, max = 60)
<%_ if (databaseType === 'sql') { _%>
    @Column(name = "password_hash", length = 60, nullable = false)
<%_ } _%>
    @JsonbTransient
    public String password;

<%_ } _%>
    @Size(max = 50)
<%_ if (databaseType === 'sql') { _%>
    @Column(name = "first_name", length = 50)
<%_ } _%>
    public String firstName;

    @Size(max = 50)
<%_ if (databaseType === 'sql') { _%>
    @Column(name = "last_name", length = 50)
<%_ } _%>
    public String lastName;

    @Email
    @Size(min = 5, max = 254)
<%_ if (databaseType === 'sql') { _%>
    @Column(length = 254, unique = true)
<%_ } _%>
    public String email;

    @NotNull
<%_ if (databaseType === 'sql') { _%>
    @Column(nullable = false)
<%_ } _%>
    public boolean activated = false;

    @Size(min = 2, max = 10)
<%_ if (databaseType === 'sql') { _%>
    @Column(name = "lang_key", length = 10)
<%_ } _%>
    public String langKey;

    @Size(max = 256)
<%_ if (databaseType === 'sql') { _%>
    @Column(name = "image_url", length = 256)
<%_ } _%>
    public String imageUrl;

<%_ if (authenticationType !== 'oauth2') { _%>
    @Size(max = 20)
<%_ if (databaseType === 'sql') { _%>
    @Column(name = "activation_key", length = 20)
<%_ } _%>
    @JsonbTransient
    public String activationKey;

    @Size(max = 20)
<%_ if (databaseType === 'sql') { _%>
    @Column(name = "reset_key", length = 20)
<%_ } _%>
    @JsonbTransient
    public String resetKey;

<%_ if (databaseType === 'sql') { _%>
    @Column(name = "reset_date")
<%_ } _%>
    public Instant resetDate = null;

<%_ if (databaseType === 'sql') { _%>
    @ManyToMany
    @JoinTable(
        name = "<%= jhiTablePrefix %>_user_authority",
        joinColumns = { @JoinColumn(name = "user_id", referencedColumnName = "id") },
        inverseJoinColumns = { @JoinColumn(name = "authority_name", referencedColumnName = "name") }
    )
    <%_ if (enableHibernateCache) { _%>
    @Cache(usage = CacheConcurrencyStrategy.READ_ONLY)
    <%_ } _%>
    @BatchSize(size = 20)
<%_ } _%>
    @JsonbTransient
    public Set<Authority> authorities = new HashSet<>();

    //To move to an audit mechanism
    //    @CreatedBy
<%_ if (databaseType === 'sql') { _%>
    @Column(name = "created_by", nullable = false, length = 50, updatable = false)
<%_ } _%>
    @JsonbTransient
    public String createdBy = "";

    //    @CreatedDate
<%_ if (databaseType === 'sql') { _%>
    @Column(name = "created_date", updatable = false)
<%_ } _%>
    @JsonbTransient
    public Instant createdDate = Instant.now();

    //    @LastModifiedBy
<%_ if (databaseType === 'sql') { _%>
    @Column(name = "last_modified_by", length = 50)
<%_ } _%>
    @JsonbTransient
    public String lastModifiedBy = "";

    //    @LastModifiedDate
<%_ if (databaseType === 'sql') { _%>
    @Column(name = "last_modified_date")
<%_ } _%>
    @JsonbTransient
    public Instant lastModifiedDate = Instant.now();

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof User)) {
            return false;
        }
        return id != null && id.equals(((User) o).id);
    }

    @Override
    public int hashCode() {
        return 31;
    }

    @Override
    public String toString() {
        return (
            "User{" +
            "login='" +
            login +
            '\'' +
            ", firstName='" +
            firstName +
            '\'' +
            ", lastName='" +
            lastName +
            '\'' +
            ", email='" +
            email +
            '\'' +
            ", imageUrl='" +
            imageUrl +
            '\'' +
<%_ if (authenticationType !== 'oauth2') { _%>
            ", activated='" +
            activated +
            '\'' +
            ", langKey='" +
            langKey +
            '\'' +
            ", activationKey='" +
            activationKey +
            '\'' +
<%_ } _%>
            "}"
        );
    }

<%_ if (['sql', 'mongodb'].includes(databaseType)  && authenticationType !== 'oauth2') { _%>
    public static Optional<User> findOneByActivationKey(String activationKey) {
        return find("activationKey", activationKey).firstResultOptional();
    }

    public static List<User> findAllByActivatedIsFalseAndActivationKeyIsNotNullAndCreatedDateBefore(Instant dateTime) {
        return list("activated = false and activationKey not null and createdDate <= ?1", dateTime);
    }

    public static Optional<User> findOneByResetKey(String resetKey) {
        return find("resetKey", resetKey).firstResultOptional();
    }

<%_ } _%>
    public static Optional<User> findOneByEmailIgnoreCase(String email) {
        <%_ if (databaseType === 'sql') { _%>
        return find("LOWER(email) = LOWER(?1)", email).firstResultOptional();
        <%_ } else if (databaseType === 'mongodb') { _%>
        return find("email", email).firstResultOptional();
        <%_ } _%>
    }

    public static Optional<User> findOneByLogin(String login) {
        return find("login", login).firstResultOptional();
    }

    public static Optional<User> findOneWithAuthoritiesById(Long id) {
        <%_ if (databaseType === 'sql') { _%>
        return find("FROM User u LEFT JOIN FETCH u.authorities WHERE u.id = ?1", id).firstResultOptional();
        <%_ } else if (databaseType === 'mongodb') { _%>
        return find("_id", id).firstResultOptional();
        <%_ } _%>
    }

    <%_ if (cacheProvider === 'caffeine') { _%>
    @CacheResult(cacheName = Constants.USERS_BY_LOGIN_CACHE)
    <%_ } _%>
    public static <% if (cacheProvider === 'redis') { %>User<% } else { %>Optional<User><% } %> findOneWithAuthoritiesByLogin(String login) {
        <%_ if (databaseType === 'sql') { _%>
        return find("FROM User u LEFT JOIN FETCH u.authorities WHERE u.login = ?1", login)
        <%_ } else if (databaseType === 'mongodb') { _%>
        return find("login", login)
        <%_ } _%>
            <% if (cacheProvider === 'redis') { %>.firstResult<% } else { %>.firstResultOptional<% } %>();
    }

    <%_ if (cacheProvider === 'caffeine') { _%>
    @CacheResult(cacheName = Constants.USERS_BY_EMAIL_CACHE)
    <%_ } _%>
    public static <% if (cacheProvider === 'redis') { %>User<% } else { %>Optional<User><% } %> findOneWithAuthoritiesByEmailIgnoreCase(String email) {
        <%_ if (databaseType === 'sql') { _%>
        return find("FROM User u LEFT JOIN FETCH u.authorities WHERE LOWER(u.login) = LOWER(?1)", email)
        <%_ } else if (databaseType === 'mongodb') { _%>
        return find("email", email)
        <%_ } _%>
            <% if (cacheProvider === 'redis') { %>.firstResult<% } else { %>.firstResultOptional<% } %>();
    }

    public static List<User> findAllByLoginNot(Page page, String login) {
        return find("login != ?1", login).page(page).list();
    }
<%_ } _%>
}
